volumes:
  keycloakdb:
  dkdb:

networks:
  secnet:
    driver: bridge
  dknet:
    driver: bridge

services:

  keycloakdb:
    image: bitnami/postgresql:15.4.0
    profiles:
      - defkon
    volumes:
      - type: bind
        source: initdb/keycloak
        target: /docker-entrypoint-initdb.d
      - type: volume
        source: keycloakdb
        target: /bitnami/postgresql
    environment:
      POSTGRESQL_PASSWORD: ${pgPassword}
      KEYCLOAK_DATABASE_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
    networks:
      - secnet
    deploy:
      resources:
        limits:
          memory: 100M
      restart_policy:
        window: 3s
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 10s

  keycloak:
    image: bitnami/keycloak:22.0.4
    profiles:
      - defkon
    depends_on:
      - keycloakdb
    volumes:
      - type: bind
        source: dknode/defkon/cert.pem
        target: /opt/bitnami/keycloak/certs/cert.pem
      - type: bind
        source: dknode/defkon/key.pem
        target: /opt/bitnami/keycloak/certs/key.pem
    environment:
      KEYCLOAK_ADMIN_USER: ${KEYCLOAK_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KEYCLOAK_DATABASE_HOST: ${KEYCLOAK_DATABASE_HOST}
      KEYCLOAK_DATABASE_PORT: ${KEYCLOAK_DATABASE_PORT}
      KEYCLOAK_DATABASE_NAME: ${KEYCLOAK_DATABASE_NAME}
      KEYCLOAK_DATABASE_USER: ${KEYCLOAK_DATABASE_USER}
      KEYCLOAK_DATABASE_PASSWORD: ${KEYCLOAK_DATABASE_PASSWORD}
      KEYCLOAK_DATABASE_SCHEMA: ${KEYCLOAK_DATABASE_SCHEMA}
      KEYCLOAK_JDBC_PARAMS: ${KEYCLOAK_JDBC_PARAMS}
      KEYCLOAK_ENABLE_HTTPS: true
      KEYCLOAK_HTTPS_USE_PEM: true
      KEYCLOAK_HTTPS_CERTIFICATE_FILE: /opt/bitnami/keycloak/certs/cert.pem
      KEYCLOAK_HTTPS_CERTIFICATE_KEY_FILE: /opt/bitnami/keycloak/certs/key.pem
    ports:
      - "8443:8443"
      - "8880:8080"
    networks:
      - secnet
    deploy:
      resources:
        limits:
          memory: 0.5G
      restart_policy:
        window: 30s
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 60s

  dknode:
    image: ${project}dknode${tag}
    profiles:
      - defkon
    build:
      dockerfile: Dockerfile
      context: dknode/defkon
    ports:
      - "8086:8086"
    deploy:
      resources:
        limits:
          memory: 0.5G
          cpus: "1"
      restart_policy:
        window: 1s
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 5s

  # default RTSP proxy for live streams
  mediamtx:
    image: bluenviron/mediamtx
    profiles:
      - defkon
    network_mode: host

  dkdb:
    image: bitnami/postgresql:15.4.0
    profiles:
      - defkoi
    volumes:
      - type: bind
        source: initdb/defkoi
        target: /docker-entrypoint-initdb.d
      - type: volume
        source: dkdb
        target: /bitnami/postgresql
    environment:
      dbName: ${dbName}
      POSTGRESQL_PASSWORD: ${pgPassword}
      ownerPassword: ${ownerPassword}
    ports:
      - "5432:5432"
    networks:
      - dknet
    deploy:
      resources:
        limits:
          memory: 0.5G
      restart_policy:
        window: 5s
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 10s

  dkrest:
    image: ${project}dkrest${tag}
    profiles:
      - defkoi
    build:
      dockerfile: Dockerfile
      context: dkrest
      args:
        jar: target/dkrest-${version}.jar
        inferenceImg: ${inferenceImg}
    depends_on:
      - dkdb
    environment:
      # set SPRING_CONFIG_LOCATION or set SPRING_CLOUD_CONFIG_URI or leave both commented out for default app props
#      SPRING_CONFIG_LOCATION: /app/defkoi/dkrest.properties
#      SPRING_CLOUD_CONFIG_URI: ${SPRING_CLOUD_CONFIG_URI}
      SPRING_CLOUD_CONFIG_LABEL: ${SPRING_CLOUD_CONFIG_LABEL}
      SPRING_CLOUD_CONFIG_USERNAME: ${SPRING_CLOUD_CONFIG_USERNAME}
      SPRING_CLOUD_CONFIG_PASSWORD: ${SPRING_CLOUD_CONFIG_PASSWORD}
    ports:
      - "8085:8085"
    networks:
      - dknet
    volumes:
      # Note: this mount is not needed for default application properties
      # Note: this mount is also not needed if using Spring Config Service
      #      - type: bind
      #        source: ${dkDir}
      #        target: /app/defkoi
      - type: bind
        source: $mediaDir
        target: $mediaMnt
      - type: bind
        source: /tmp/argus_socket
        target: /tmp/argus_socket
      - type: bind
        source: /etc/enctune.conf
        target: /etc/enctune.conf
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
        monitor: 20s
    devices:
      - "/dev/video0:/dev/video0"
      # Add your video devices here
#      - "/dev/video1:/dev/video1"

